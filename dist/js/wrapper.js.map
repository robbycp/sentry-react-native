{"version":3,"file":"wrapper.js","sourceRoot":"","sources":["../../src/js/wrapper.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAIvD,MAAM,EAAE,QAAQ,EAAE,GAAG,aAAa,CAAC;AAEnC;;GAEG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB;;;OAGG;IACG,SAAS,CAAC,KAAY;;YAC1B,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC;aAC/B;YAED,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE;gBACjC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAE3D,KAAa,CAAC,OAAO,GAAG;oBACvB,OAAO,EAAE,KAAK,CAAC,OAAO;iBACvB,CAAC;gBACF,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACtC,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;gBAC5B,IAAI;oBACF,0CAA0C;oBAC1C,MAAM,GAAG,MAAM,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;iBACvD;gBAAC,WAAM;oBACN,8EAA8E;iBAC/E;gBACD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC1B,YAAY,EAAE,kBAAkB;oBAChC,MAAM;oBACN,IAAI,EAAE,OAAO;iBACd,CAAC,CAAC;gBACH,MAAM,QAAQ,GAAG,GAAG,MAAM,KAAK,IAAI,KAAK,OAAO,EAAE,CAAC;gBAClD,0CAA0C;gBAC1C,OAAO,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;aAC3C;YACD,0CAA0C;YAC1C,OAAO,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;KAAA;IAED;;;OAGG;IACG,gBAAgB,CAAC,UAA8B,EAAE;;YACrD,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC;aAC/B;YAED,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC3B,OAAO,CAAC,IAAI,CACV,gEAAgE,CACjE,CAAC;aACH;YAED,0CAA0C;YAC1C,OAAO,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC;KAAA;IAED;;OAEG;IACG,YAAY;;YAKhB,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC;aAC/B;YACD,0CAA0C;YAC1C,OAAO,QAAQ,CAAC,YAAY,EAAE,CAAC;QACjC,CAAC;KAAA;IAED;;OAEG;IACG,cAAc;;YAClB,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC;aAC/B;YACD,0CAA0C;YAC1C,OAAO,QAAQ,CAAC,cAAc,EAAE,CAAC;QACnC,CAAC;KAAA;IAED;;;OAGG;IACH,WAAW,CAAC,KAAa;QACvB,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;YACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC;SAC/B;QACD,0CAA0C;QAC1C,OAAO,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;YACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC;SAC/B;QACD,0CAA0C;QAC1C,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,OAAO,CAAC,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,uBAAuB;QACrB,0CAA0C;QAC1C,OAAO,IAAI,CAAC,cAAc,EAAE,IAAI,QAAQ,CAAC,qBAAqB,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,0BAA0B;QACxB,0CAA0C;QAC1C,OAAO,IAAI,CAAC,cAAc,EAAE,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC3D,CAAC;IAED,kBAAkB,EAAE,IAAI,WAAW,CACjC,wDAAwD,CACzD;IAED,QAAQ,EAAE,QAAQ,CAAC,EAAE;CACtB,CAAC","sourcesContent":["import { Event, Response } from \"@sentry/types\";\nimport { SentryError } from \"@sentry/utils\";\nimport { NativeModules, Platform } from \"react-native\";\n\nimport { ReactNativeOptions } from \"./backend\";\n\nconst { RNSentry } = NativeModules;\n\n/**\n * Our internal interface for calling native functions\n */\nexport const NATIVE = {\n  /**\n   * Sending the event over the bridge to native\n   * @param event Event\n   */\n  async sendEvent(event: Event): Promise<Response> {\n    if (!this.isNativeClientAvailable()) {\n      throw this._NativeClientError;\n    }\n\n    if (NATIVE.platform === \"android\") {\n      const header = JSON.stringify({ event_id: event.event_id });\n\n      (event as any).message = {\n        message: event.message\n      };\n      const payload = JSON.stringify(event);\n      let length = payload.length;\n      try {\n        // tslint:disable-next-line: no-unsafe-any\n        length = await RNSentry.getStringBytesLength(payload);\n      } catch {\n        // The native call failed, we do nothing, we have payload.length as a fallback\n      }\n      const item = JSON.stringify({\n        content_type: \"application/json\",\n        length,\n        type: \"event\"\n      });\n      const envelope = `${header}\\n${item}\\n${payload}`;\n      // tslint:disable-next-line: no-unsafe-any\n      return RNSentry.captureEnvelope(envelope);\n    }\n    // tslint:disable-next-line: no-unsafe-any\n    return RNSentry.sendEvent(event);\n  },\n\n  /**\n   * Starts native with the provided options.\n   * @param options ReactNativeOptions\n   */\n  async startWithOptions(options: ReactNativeOptions = {}): Promise<boolean> {\n    if (!this.isNativeClientAvailable()) {\n      throw this._NativeClientError;\n    }\n\n    if (__DEV__ && !options.dsn) {\n      console.warn(\n        \"Warning: No DSN was provided. The Sentry SDK will be disabled.\"\n      );\n    }\n\n    // tslint:disable-next-line: no-unsafe-any\n    return RNSentry.startWithOptions(options);\n  },\n\n  /**\n   * Fetches the release from native\n   */\n  async fetchRelease(): Promise<{\n    build: string;\n    id: string;\n    version: string;\n  }> {\n    if (!this.isNativeClientAvailable()) {\n      throw this._NativeClientError;\n    }\n    // tslint:disable-next-line: no-unsafe-any\n    return RNSentry.fetchRelease();\n  },\n\n  /**\n   * Fetches the device contexts. Not used on Android.\n   */\n  async deviceContexts(): Promise<object> {\n    if (!this.isNativeClientAvailable()) {\n      throw this._NativeClientError;\n    }\n    // tslint:disable-next-line: no-unsafe-any\n    return RNSentry.deviceContexts();\n  },\n\n  /**\n   * Sets log level in native\n   * @param level number\n   */\n  setLogLevel(level: number): void {\n    if (!this.isNativeClientAvailable()) {\n      throw this._NativeClientError;\n    }\n    // tslint:disable-next-line: no-unsafe-any\n    return RNSentry.setLogLevel(level);\n  },\n\n  /**\n   * Triggers a native crash.\n   * Use this only for testing purposes.\n   */\n  crash(): void {\n    if (!this.isNativeClientAvailable()) {\n      throw this._NativeClientError;\n    }\n    // tslint:disable-next-line: no-unsafe-any\n    return RNSentry.crash();\n  },\n\n  /**\n   * Checks whether the RNSentry module is loaded.\n   */\n  isModuleLoaded(): boolean {\n    return !!RNSentry;\n  },\n\n  /**\n   *  Checks whether the RNSentry module is loaded and the native client is available\n   */\n  isNativeClientAvailable(): boolean {\n    // tslint:disable-next-line: no-unsafe-any\n    return this.isModuleLoaded() && RNSentry.nativeClientAvailable;\n  },\n\n  /**\n   *  Checks whether the RNSentry module is loaded and native transport is available\n   */\n  isNativeTransportAvailable(): boolean {\n    // tslint:disable-next-line: no-unsafe-any\n    return this.isModuleLoaded() && RNSentry.nativeTransport;\n  },\n\n  _NativeClientError: new SentryError(\n    \"Native Client is not available, can't start on native.\"\n  ),\n\n  platform: Platform.OS\n};\n"]}