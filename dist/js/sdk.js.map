{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/js/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import { defaultIntegrations, getCurrentHub } from \"@sentry/browser\";\nimport { initAndBind, setExtra } from \"@sentry/core\";\nimport { RewriteFrames } from \"@sentry/integrations\";\nimport { StackFrame } from \"@sentry/types\";\nimport { getGlobalObject } from \"@sentry/utils\";\n// import { NativeModules } from \"react-native\";\n\nimport { ReactNativeOptions } from \"./backend\";\nimport { ReactNativeClient } from \"./client\";\nimport {\n  DebugSymbolicator,\n  DeviceContext,\n  ReactNativeErrorHandlers,\n  Release,\n} from \"./integrations\";\n\n// const { RNSentry } = NativeModules;\n\nconst IGNORED_DEFAULT_INTEGRATIONS = [\n  \"GlobalHandlers\", // We will use the react-native internal handlers\n  \"TryCatch\", // We don't need this\n];\n\n/**\n * Inits the SDK\n */\nexport function init(\n  options: ReactNativeOptions = {\n    enableNative: true,\n    enableNativeCrashHandling: true,\n  }\n): void {\n  // tslint:disable: strict-comparisons\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = [\n      new ReactNativeErrorHandlers(),\n      new Release(),\n      ...defaultIntegrations.filter(\n        (i) => !IGNORED_DEFAULT_INTEGRATIONS.includes(i.name)\n      ),\n    ];\n    if (__DEV__) {\n      options.defaultIntegrations.push(new DebugSymbolicator());\n    }\n    options.defaultIntegrations.push(\n      new RewriteFrames({\n        iteratee: (frame: StackFrame) => {\n          if (frame.filename) {\n            frame.filename = frame.filename\n              .replace(/^file\\:\\/\\//, \"\")\n              .replace(/^address at /, \"\")\n              .replace(/^.*\\/[^\\.]+(\\.app|CodePush|.*(?=\\/))/, \"\");\n\n            if (frame.filename === \"native\") {\n              frame.in_app = false;\n            }\n\n            const appPrefix = \"app://\";\n            // We always want to have a tripple slash\n            frame.filename =\n              frame.filename.indexOf(\"/\") === 0\n                ? `${appPrefix}${frame.filename}`\n                : `${appPrefix}/${frame.filename}`;\n          }\n          return frame;\n        },\n      }),\n      new DeviceContext()\n    );\n  }\n  if (options.enableNative === undefined) {\n    options.enableNative = true;\n  }\n  if (options.enableNativeCrashHandling === undefined) {\n    options.enableNativeCrashHandling = true;\n  }\n  if (options.enableNativeNagger === undefined) {\n    options.enableNativeNagger = true;\n  }\n  // tslint:enable: strict-comparisons\n  initAndBind(ReactNativeClient, options);\n\n  // TODO: Regist scope syncing here\n  // Workaround for setting release/dist on native\n  // const scope = getCurrentHub().getScope();\n  // if (scope) {\n  //   scope.addScopeListener(internalScope => {\n  //     console.log(internalScope);\n  //     // RNSentry.extraUpdated((internalScope as any)._extra)\n  //   });\n  // }\n\n  // tslint:disable-next-line: no-unsafe-any\n  if (getGlobalObject<any>().HermesInternal) {\n    getCurrentHub().setTag(\"hermes\", \"true\");\n  }\n}\n\n/**\n * Sets the release on the event.\n */\nexport function setRelease(release: string): void {\n  setExtra(\"__sentry_release\", release);\n}\n\n/**\n * Sets the dist on the event.\n */\nexport function setDist(dist: string): void {\n  setExtra(\"__sentry_dist\", dist);\n}\n\n/**\n * If native client is available it will trigger a native crash.\n * Use this only for testing purposes.\n */\nexport function nativeCrash(): void {\n  const client = getCurrentHub().getClient<ReactNativeClient>();\n  if (client) {\n    client.nativeCrash();\n  }\n}\n"]}